#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# peepdf is a tool to analyse and modify PDF files
#    http://peepdf.eternal-todo.com
#    By Jose Miguel Esparza <jesparza AT eternal-todo.com>
#
#    Copyright (C) 2011-2017 Jose Miguel Esparza
#
#    This file is part of peepdf.
#
#        peepdf is free software: you can redistribute it and/or modify
#        it under the terms of the GNU General Public License as published by
#        the Free Software Foundation, either version 3 of the License, or
#        (at your option) any later version.
#
#        peepdf is distributed in the hope that it will be useful,
#        but WITHOUT ANY WARRANTY; without even the implied warranty of
#        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
#        GNU General Public License for more details.
#
#        You should have received a copy of the GNU General Public License
#        along with peepdf.    If not, see <http://www.gnu.org/licenses/>.
#

'''
    Initial script to launch the tool
'''

import sys
import os
import optparse
from datetime import datetime

import peepdf.PDFOutput as PDFOutput


author = 'Jose Miguel Esparza'
email = 'peepdf AT eternal-todo.com'
url = 'http://peepdf.eternal-todo.com'
twitter = 'http://twitter.com/EternalTodo'
peepTwitter = 'http://twitter.com/peepdf'
version = '0.3'
revision = '275'
newLine = os.linesep
absPeepdfRoot = os.path.dirname(os.path.realpath(sys.argv[0]))
errorsFile = os.path.join(absPeepdfRoot, 'errors.txt')

versionHeader = 'Version: peepdf ' + version + ' r' + revision
peepdfHeader = versionHeader + newLine * 2 + \
               url + newLine + \
               peepTwitter + newLine + \
               email + newLine * 2 + \
               author + newLine + \
               twitter + newLine


if __name__ == '__main__':
    argsParser = optparse.OptionParser(usage='Usage: peepdf.py [options] PDF_file', description=versionHeader)
    argsParser.add_option('-i', '--interactive', action='store_true', dest='isInteractive', default=False,
                          help='Sets console mode.')
    argsParser.add_option('-s', '--load-script', action='store', type='string', dest='scriptFile',
                          help='Loads the commands stored in the specified file and execute them.')
    argsParser.add_option('-c', '--check-vt', action='store_true', dest='checkOnVT', default=False,
                          help='Checks the hash of the PDF file on VirusTotal.')
    argsParser.add_option('-f', '--force-mode', action='store_true', dest='isForceMode', default=False,
                          help='Sets force parsing mode to ignore errors.')
    argsParser.add_option('-l', '--loose-mode', action='store_true', dest='isLooseMode', default=False,
                          help='Sets loose parsing mode to catch malformed objects.')
    argsParser.add_option('-m', '--manual-analysis', action='store_true', dest='isManualAnalysis', default=False,
                          help='Avoids automatic Javascript analysis. Useful with eternal loops like heap spraying.')
    argsParser.add_option('-u', '--update', action='store_true', dest='update', default=False,
                          help='Updates peepdf with the latest files from the repository.')
    argsParser.add_option('-g', '--grinch-mode', action='store_true', dest='avoidColors', default=False,
                          help='Avoids colorized output in the interactive console.')
    argsParser.add_option('-v', '--version', action='store_true', dest='version', default=False,
                          help='Shows program\'s version number.')
    argsParser.add_option('-x', '--xml', action='store_true', dest='xmlOutput', default=False,
                          help='Shows the document information in XML format.')
    argsParser.add_option('-j', '--json', action='store_true', dest='jsonOutput', default=False,
                          help='Shows the document information in JSON format.')
    argsParser.add_option('-C', '--command', action='append', type='string', dest='commands',
                          help='Specifies a command from the interactive console to be executed.')
    (options, args) = argsParser.parse_args()
    
    if options.version:
        print peepdfHeader
    elif options.update:
        updated = False
        newVersion = ''
        localVersion = 'v' + version + ' r' + revision
        reVersion = 'version = \'(\d\.\d)\'\s*?revision = \'(\d+)\''
        repURL = 'https://api.github.com/repos/jesparza/peepdf/contents/'
        rawRepURL = 'https://raw.githubusercontent.com/jesparza/peepdf/master/'
        print '[-] Checking if there are new updates...'
        try:
            remotePeepContent = urllib2.urlopen(rawRepURL + 'peepdf.py').read()
        except:
            sys.exit('[x] Connection error while trying to connect with the repository')
        repVer = re.findall(reVersion, remotePeepContent)
        if repVer:
            newVersion = 'v' + repVer[0][0] + ' r' + repVer[0][1]
        else:
            sys.exit('[x] Error getting the version number from the repository')
        if localVersion == newVersion:
            print '[+] No changes! ;)'
        else:
            print '[+] There are new updates!!'
            print '[-] Getting paths from the repository...'
            pathNames = PDFOutput.getRepPaths(repURL, '')
            print '[+] Done'
            localFilesInfo = PDFOutput.getLocalFilesInfo(pathNames)
            print '[-] Checking files...'
            for path in pathNames:
                try:
                    fileContent = urllib2.urlopen(rawRepURL + path).read()
                except:
                    sys.exit('[x] Connection error while getting file "' + path + '"')
                if path in localFilesInfo:
                    # File exists
                    # Checking hash
                    shaHash = hashlib.sha256(fileContent).hexdigest()
                    if shaHash != localFilesInfo[path][0]:
                        open(localFilesInfo[path][1], 'wb').write(fileContent)
                        print '[+] File "' + path + '" updated successfully'
                else:
                    # File does not exist
                    index = path.rfind('/')
                    if index != -1:
                        dirsPath = path[:index]
                        absDirsPath = os.path.join(absPeepdfRoot, dirsPath)
                        if not os.path.exists(absDirsPath):
                            print '[+] New directory "' + dirsPath + '" created successfully'
                            os.makedirs(absDirsPath)
                    open(os.path.join(absPeepdfRoot, path), 'wb').write(fileContent)
                    print '[+] New file "' + path + '" created successfully'
            message = '[+] peepdf updated successfully'
            if newVersion != '':
                message += ' to ' + newVersion
            print message

    if len(args) == 1:
        pdfName = args[0]
        if not os.path.exists(pdfName):
            sys.exit('Error: The file "' + pdfName + '" does not exist!!')
    elif len(args) > 1 or (len(args) == 0 and not options.isInteractive):
        sys.exit(argsParser.print_help())

    PDFOutput.main(options, args, errorsFile, pdfName=pdfName)
